// This file is auto-generated by @hey-api/openapi-ts

export type Fund = {
    /**
     * Fund unique identifier
     */
    id: string;
    /**
     * Fund name
     */
    name: string;
    /**
     * Fund description
     */
    description: string;
    /**
     * Published status
     */
    published: boolean;
    /**
     * Date added
     */
    createdAt: string;
    /**
     * Brands controlled by this fund
     */
    brands: Array<Brand>;
};

export type Sector = {
    /**
     * Sector unique identifier
     */
    id: string;
    /**
     * Sector name
     */
    name: string;
    /**
     * Sector description
     */
    description: string;
    /**
     * Lucide icon name
     */
    icon?: string;
    /**
     * Published status
     */
    published: boolean;
    /**
     * Date added
     */
    createdAt: string;
    /**
     * Brands operating in this sector
     */
    brands: Array<Brand>;
};

export type Brand = {
    /**
     * Brand unique identifier
     */
    id: string;
    /**
     * Brand name
     */
    name: string;
    /**
     * Brand description
     */
    description: string;
    /**
     * Brand official website URL
     */
    source?: string;
    /**
     * Published status
     */
    published: boolean;
    /**
     * Date added
     */
    createdAt: string;
    /**
     * Parent company that owns this brand
     */
    company?: Company;
    /**
     * Fund that controls this brand
     */
    fund?: Fund;
    /**
     * Primary sector this brand operates in
     */
    sector?: Sector;
    /**
     * Personalities associated with this brand
     */
    personalities: {
        [key: string]: unknown;
    };
};

export type Personality = {
    /**
     * Personality unique identifier
     */
    id: string;
    /**
     * Personality name
     */
    name: string;
    /**
     * Personality description
     */
    description: string;
    /**
     * Published status
     */
    published: boolean;
    /**
     * Date added
     */
    createdAt: string;
    /**
     * Related personalities (computed from EntityRelation)
     */
    relatedPersonalities?: Array<Personality>;
};

export type Company = {
    /**
     * Company unique identifier
     */
    id: string;
    /**
     * Company name
     */
    name: string;
    /**
     * Company description
     */
    description: string;
    /**
     * Source link (URL)
     */
    source: string;
    /**
     * Published status
     */
    published: boolean;
    /**
     * Date added
     */
    createdAt: string;
    /**
     * Brands owned by this company
     */
    brands: Array<Brand>;
    /**
     * Investment funds (computed from EntityRelation)
     */
    funds?: Array<Fund>;
    /**
     * Business sectors (computed from EntityRelation)
     */
    sectors?: Array<Sector>;
    /**
     * Involved personalities (computed from EntityRelation)
     */
    personalities?: Array<Personality>;
    /**
     * Relation context when filtered (how this company matched the filters)
     */
    matchedVia?: Array<unknown>;
};

export type CreateCompanyDto = {
    /**
     * Company name
     */
    name: string;
    /**
     * Company description
     */
    description: string;
    /**
     * Company source URL
     */
    source: string;
    /**
     * Investment fund ID
     */
    fund: string;
    /**
     * Business sector ID
     */
    sector: string;
    /**
     * Involved personalities IDs
     */
    personalities: Array<string>;
};

export type EntityRelation = {
    /**
     * Relation unique identifier
     */
    id: string;
    /**
     * Source entity type
     */
    sourceType: 'fund' | 'company' | 'brand' | 'personality' | 'sector';
    /**
     * Source entity ID
     */
    sourceId: string;
    /**
     * Target entity type
     */
    targetType: 'fund' | 'company' | 'brand' | 'personality' | 'sector';
    /**
     * Target entity ID
     */
    targetId: string;
    /**
     * Type of relationship
     */
    relationType: 'owns' | 'controls' | 'manages' | 'founded' | 'invests_in' | 'invested_in' | 'operates_in' | 'belongs_to' | 'competes_with' | 'partners_with' | 'acquired' | 'spun_off' | 'financement' | 'détention_capital' | 'plateforme_roll-up' | 'studio' | 'incubée_par' | 'supports' | 'is_friend_of' | 'is_family_of' | 'is_colleague_of' | 'is_mentor_of' | 'is_partner_of' | 'is_rival_of' | 'is_connected_to';
    /**
     * Relationship strength (0-1)
     */
    strength?: number;
    /**
     * Start date of the relationship
     */
    startDate?: string;
    /**
     * End date of the relationship
     */
    endDate?: string;
    /**
     * Additional context or notes
     */
    notes?: string;
    /**
     * Date when relation was created
     */
    createdAt: string;
    /**
     * Date when relation was last updated
     */
    updatedAt: string;
};

export type AppControllerGetHelloData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type AppControllerGetHelloResponses = {
    /**
     * Application is running
     */
    200: {
        message?: string;
        timestamp?: string;
        version?: string;
    };
};

export type AppControllerGetHelloResponse = AppControllerGetHelloResponses[keyof AppControllerGetHelloResponses];

export type AppControllerGetVersionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/version';
};

export type AppControllerGetVersionResponses = {
    /**
     * Application version
     */
    200: {
        version?: string;
        name?: string;
        description?: string;
    };
};

export type AppControllerGetVersionResponse = AppControllerGetVersionResponses[keyof AppControllerGetVersionResponses];

export type AppControllerGetHealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type AppControllerGetHealthResponses = {
    /**
     * Service is healthy
     */
    200: {
        status?: string;
        uptime?: number;
        environment?: string;
    };
};

export type AppControllerGetHealthResponse = AppControllerGetHealthResponses[keyof AppControllerGetHealthResponses];

export type AuthControllerSignUpData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/signup';
};

export type AuthControllerSignUpResponses = {
    201: unknown;
};

export type AuthControllerSignInData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/signin';
};

export type AuthControllerSignInResponses = {
    201: unknown;
};

export type AuthControllerChangePasswordData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/change-password';
};

export type AuthControllerChangePasswordResponses = {
    201: unknown;
};

export type BrandControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/brands';
};

export type BrandControllerFindAllResponses = {
    /**
     * Success
     */
    200: Array<Brand>;
};

export type BrandControllerFindAllResponse = BrandControllerFindAllResponses[keyof BrandControllerFindAllResponses];

export type BrandControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/brands/{id}';
};

export type BrandControllerFindOneErrors = {
    /**
     * Brand not found
     */
    404: unknown;
};

export type BrandControllerFindOneResponses = {
    /**
     * Success
     */
    200: Brand;
};

export type BrandControllerFindOneResponse = BrandControllerFindOneResponses[keyof BrandControllerFindOneResponses];

export type BrandControllerFindByCompanyData = {
    body?: never;
    path: {
        companyId: string;
    };
    query?: never;
    url: '/brands/company/{companyId}';
};

export type BrandControllerFindByCompanyResponses = {
    /**
     * Success
     */
    200: Array<Brand>;
};

export type BrandControllerFindByCompanyResponse = BrandControllerFindByCompanyResponses[keyof BrandControllerFindByCompanyResponses];

export type BrandControllerFindByFundData = {
    body?: never;
    path: {
        fundId: string;
    };
    query?: never;
    url: '/brands/fund/{fundId}';
};

export type BrandControllerFindByFundResponses = {
    /**
     * Success
     */
    200: Array<Brand>;
};

export type BrandControllerFindByFundResponse = BrandControllerFindByFundResponses[keyof BrandControllerFindByFundResponses];

export type BrandControllerFindBySectorData = {
    body?: never;
    path: {
        sectorId: string;
    };
    query?: never;
    url: '/brands/sector/{sectorId}';
};

export type BrandControllerFindBySectorResponses = {
    /**
     * Success
     */
    200: Array<Brand>;
};

export type BrandControllerFindBySectorResponse = BrandControllerFindBySectorResponses[keyof BrandControllerFindBySectorResponses];

export type CompanyControllerFindAllData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (default: 1)
         */
        page?: number;
        /**
         * Items per page (default: 30)
         */
        limit?: number;
        /**
         * Search term for company name, fund name, sector name, or personality name
         */
        search?: string;
        /**
         * Filter by fund IDs (comma-separated values)
         */
        fundIds?: string;
        /**
         * Filter by sector IDs (comma-separated values)
         */
        sectorIds?: string;
        /**
         * Filter by personality IDs (comma-separated values)
         */
        personalityIds?: string;
    };
    url: '/companies';
};

export type CompanyControllerFindAllResponses = {
    /**
     * Companies retrieved successfully
     */
    200: {
        data?: Array<Company>;
        pagination?: {
            page?: number;
            limit?: number;
            total?: number;
            totalPages?: number;
        };
    };
};

export type CompanyControllerFindAllResponse = CompanyControllerFindAllResponses[keyof CompanyControllerFindAllResponses];

export type CompanyControllerCreateData = {
    body: CreateCompanyDto;
    path?: never;
    query?: never;
    url: '/companies';
};

export type CompanyControllerCreateResponses = {
    /**
     * Company created successfully
     */
    201: Company;
};

export type CompanyControllerCreateResponse = CompanyControllerCreateResponses[keyof CompanyControllerCreateResponses];

export type CompanyControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/companies/{id}';
};

export type CompanyControllerRemoveResponses = {
    /**
     * Company deleted successfully
     */
    200: unknown;
};

export type CompanyControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/companies/{id}';
};

export type CompanyControllerFindOneResponses = {
    /**
     * Company found
     */
    200: Company;
};

export type CompanyControllerFindOneResponse = CompanyControllerFindOneResponses[keyof CompanyControllerFindOneResponses];

export type CompanyControllerUpdateData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/companies/{id}';
};

export type CompanyControllerUpdateResponses = {
    /**
     * Company updated successfully
     */
    200: Company;
};

export type CompanyControllerUpdateResponse = CompanyControllerUpdateResponses[keyof CompanyControllerUpdateResponses];

export type EntityRelationControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/entity-relations';
};

export type EntityRelationControllerFindAllResponses = {
    /**
     * Success
     */
    200: Array<EntityRelation>;
};

export type EntityRelationControllerFindAllResponse = EntityRelationControllerFindAllResponses[keyof EntityRelationControllerFindAllResponses];

export type EntityRelationControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/entity-relations/{id}';
};

export type EntityRelationControllerFindOneErrors = {
    /**
     * Entity relation not found
     */
    404: unknown;
};

export type EntityRelationControllerFindOneResponses = {
    /**
     * Success
     */
    200: EntityRelation;
};

export type EntityRelationControllerFindOneResponse = EntityRelationControllerFindOneResponses[keyof EntityRelationControllerFindOneResponses];

export type EntityRelationControllerFindBySourceData = {
    body?: never;
    path: {
        sourceType: string;
        sourceId: string;
    };
    query?: never;
    url: '/entity-relations/source/{sourceType}/{sourceId}';
};

export type EntityRelationControllerFindBySourceResponses = {
    /**
     * Success
     */
    200: Array<EntityRelation>;
};

export type EntityRelationControllerFindBySourceResponse = EntityRelationControllerFindBySourceResponses[keyof EntityRelationControllerFindBySourceResponses];

export type EntityRelationControllerFindByTargetData = {
    body?: never;
    path: {
        targetType: string;
        targetId: string;
    };
    query?: never;
    url: '/entity-relations/target/{targetType}/{targetId}';
};

export type EntityRelationControllerFindByTargetResponses = {
    /**
     * Success
     */
    200: Array<EntityRelation>;
};

export type EntityRelationControllerFindByTargetResponse = EntityRelationControllerFindByTargetResponses[keyof EntityRelationControllerFindByTargetResponses];

export type EntityRelationControllerFindByRelationTypeData = {
    body?: never;
    path: {
        relationType: string;
    };
    query?: never;
    url: '/entity-relations/type/{relationType}';
};

export type EntityRelationControllerFindByRelationTypeResponses = {
    /**
     * Success
     */
    200: Array<EntityRelation>;
};

export type EntityRelationControllerFindByRelationTypeResponse = EntityRelationControllerFindByRelationTypeResponses[keyof EntityRelationControllerFindByRelationTypeResponses];

export type EntityRelationControllerFindByEntityPairData = {
    body?: never;
    path?: never;
    query: {
        sourceType: 'fund' | 'company' | 'brand' | 'personality' | 'sector';
        sourceId: string;
        targetType: 'fund' | 'company' | 'brand' | 'personality' | 'sector';
        targetId: string;
    };
    url: '/entity-relations/pair';
};

export type EntityRelationControllerFindByEntityPairResponses = {
    /**
     * Success
     */
    200: Array<EntityRelation>;
};

export type EntityRelationControllerFindByEntityPairResponse = EntityRelationControllerFindByEntityPairResponses[keyof EntityRelationControllerFindByEntityPairResponses];

export type FundControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/funds';
};

export type FundControllerFindAllResponses = {
    200: unknown;
};

export type FundControllerCreateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/funds';
};

export type FundControllerCreateResponses = {
    201: unknown;
};

export type FundControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/funds/{id}';
};

export type FundControllerRemoveResponses = {
    200: unknown;
};

export type FundControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/funds/{id}';
};

export type FundControllerFindOneResponses = {
    200: unknown;
};

export type FundControllerUpdateData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/funds/{id}';
};

export type FundControllerUpdateResponses = {
    200: unknown;
};

export type FundControllerGetCompaniesData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/funds/{id}/companies';
};

export type FundControllerGetCompaniesResponses = {
    /**
     * List all companies for this fund
     */
    200: Array<Company>;
};

export type FundControllerGetCompaniesResponse = FundControllerGetCompaniesResponses[keyof FundControllerGetCompaniesResponses];

export type PersonalityControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/personalities';
};

export type PersonalityControllerFindAllResponses = {
    200: unknown;
};

export type PersonalityControllerCreateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/personalities';
};

export type PersonalityControllerCreateResponses = {
    201: unknown;
};

export type PersonalityControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/personalities/{id}';
};

export type PersonalityControllerRemoveResponses = {
    200: unknown;
};

export type PersonalityControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/personalities/{id}';
};

export type PersonalityControllerFindOneResponses = {
    200: unknown;
};

export type PersonalityControllerUpdateData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/personalities/{id}';
};

export type PersonalityControllerUpdateResponses = {
    200: unknown;
};

export type PersonalityControllerGetCompaniesData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/personalities/{id}/companies';
};

export type PersonalityControllerGetCompaniesResponses = {
    /**
     * List all companies for this personality
     */
    200: Array<Company>;
};

export type PersonalityControllerGetCompaniesResponse = PersonalityControllerGetCompaniesResponses[keyof PersonalityControllerGetCompaniesResponses];

export type SectorControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sectors';
};

export type SectorControllerFindAllResponses = {
    200: unknown;
};

export type SectorControllerCreateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sectors';
};

export type SectorControllerCreateResponses = {
    201: unknown;
};

export type SectorControllerRemoveData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/sectors/{id}';
};

export type SectorControllerRemoveResponses = {
    200: unknown;
};

export type SectorControllerFindOneData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/sectors/{id}';
};

export type SectorControllerFindOneResponses = {
    200: unknown;
};

export type SectorControllerUpdateData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/sectors/{id}';
};

export type SectorControllerUpdateResponses = {
    200: unknown;
};

export type SectorControllerGetCompaniesData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/sectors/{id}/companies';
};

export type SectorControllerGetCompaniesResponses = {
    /**
     * List all companies for this sector
     */
    200: Array<Company>;
};

export type SectorControllerGetCompaniesResponse = SectorControllerGetCompaniesResponses[keyof SectorControllerGetCompaniesResponses];

export type ClientOptions = {
    baseUrl: string;
};