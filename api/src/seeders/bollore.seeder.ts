import { EntityManager } from '@mikro-orm/core';
import { Seeder } from '@mikro-orm/seeder';
import { Company } from '../modules/company/company.entity';
import {
  EntityType,
  RelationType,
} from '../modules/entity-relation/entity-relation.entity';
import { EntityRelationService } from '../modules/entity-relation/entity-relation.service';
import { Fund } from '../modules/fund/fund.entity';
import {
  PersonalityRelation,
  PersonalityRelationType,
} from '../modules/personality/personality-relation.entity';
import { Personality } from '../modules/personality/personality.entity';
import { Sector } from '../modules/sector/sector.entity';

export class BolloreSeeder extends Seeder {
  private entityRelationService: EntityRelationService;
  private async createOrFindSector(
    em: EntityManager,
    name: string,
    description: string,
  ): Promise<Sector> {
    let sector = await em.findOne(Sector, { name });
    if (!sector) {
      sector = new Sector();
      sector.name = name;
      sector.description = description;
      sector.published = true;
      try {
        await em.persistAndFlush(sector);
        console.log(`‚úÖ Created sector: ${name}`);
      } catch (error) {
        console.log(`   ‚ö†Ô∏è  Sector ${name} already exists, skipping...`);
        sector = await em.findOne(Sector, { name });
      }
    }
    return sector;
  }

  private async createOrFindCompany(
    em: EntityManager,
    name: string,
    description: string,
    source: string,
  ): Promise<Company> {
    let company = await em.findOne(Company, { name });
    if (!company) {
      company = new Company();
      company.name = name;
      company.description = description;
      company.source = source;
      company.published = true;
      try {
        await em.persistAndFlush(company);
        console.log(`‚úÖ Created company: ${name}`);
      } catch (error) {
        console.log(`   ‚ö†Ô∏è  Company ${name} already exists, skipping...`);
        company = await em.findOne(Company, { name });
      }
    }
    return company;
  }

  async run(em: EntityManager): Promise<void> {
    console.log('üå± Starting Bollor√© seeding...');

    this.entityRelationService = new EntityRelationService(
      em.getRepository('EntityRelation') as any,
      em,
    );

    // Create or find the sector for media and holding activities
    let mediaSector = await em.findOne(Sector, {
      name: 'M√©dias & Communication',
    });
    if (!mediaSector) {
      mediaSector = new Sector();
      mediaSector.name = 'M√©dias & Communication';
      mediaSector.description =
        'Secteur des m√©dias, t√©l√©vision, radio, presse et communication';
      mediaSector.published = true;
      await em.persistAndFlush(mediaSector);
      console.log('‚úÖ Created media sector');
    }

    let holdingSector = await em.findOne(Sector, {
      name: 'Holdings & Investissement',
    });
    if (!holdingSector) {
      holdingSector = new Sector();
      holdingSector.name = 'Holdings & Investissement';
      holdingSector.description =
        "Secteur des holdings et soci√©t√©s d'investissement";
      holdingSector.published = true;
      await em.persistAndFlush(holdingSector);
      console.log('‚úÖ Created holding sector');
    }

    // Create or find Vivendi fund
    let vivendiFund = await em.findOne(Fund, { name: 'Vivendi' });
    if (!vivendiFund) {
      vivendiFund = new Fund();
      vivendiFund.name = 'Vivendi';
      vivendiFund.description =
        'Conglom√©rat fran√ßais de m√©dias et de communication contr√¥l√© par le groupe Bollor√©. Actionnaire majoritaire de Canal+, Havas, et autres actifs m√©dias.';
      vivendiFund.published = true;
      await em.persistAndFlush(vivendiFund);
      console.log('‚úÖ Created Vivendi fund');
    }

    // Create or find Bollor√© Group fund
    let bolloreFund = await em.findOne(Fund, { name: 'Groupe Bollor√©' });
    if (!bolloreFund) {
      bolloreFund = new Fund();
      bolloreFund.name = 'Groupe Bollor√©';
      bolloreFund.description =
        'Conglom√©rat fran√ßais contr√¥l√© par la famille Bollor√©. Actionnaire de r√©f√©rence de Vivendi et de diverses entreprises industrielles et m√©diatiques.';
      bolloreFund.published = true;
      await em.persistAndFlush(bolloreFund);
      console.log('‚úÖ Created Bollor√© Group fund');
    }

    // Create or find Vincent Bollor√© personality
    let vincentBollorePersonality = await em.findOne(Personality, {
      name: 'Vincent Bollor√©',
    });
    if (!vincentBollorePersonality) {
      vincentBollorePersonality = new Personality();
      vincentBollorePersonality.name = 'Vincent Bollor√©';
      vincentBollorePersonality.description =
        'Milliardaire fran√ßais, pr√©sident et actionnaire de contr√¥le du groupe Bollor√©, influence majeure sur les m√©dias fran√ßais via Vivendi';
      vincentBollorePersonality.published = true;
      try {
        await em.persistAndFlush(vincentBollorePersonality);
        console.log('‚úÖ Created Vincent Bollor√© personality');
      } catch (error) {
        console.log(
          '   ‚ö†Ô∏è  Vincent Bollor√© personality already exists, skipping...',
        );
        vincentBollorePersonality = await em.findOne(Personality, {
          name: 'Vincent Bollor√©',
        });
      }
    }

    // Create or find Yannick Bollor√© personality
    let yannickBollorePersonality = await em.findOne(Personality, {
      name: 'Yannick Bollor√©',
    });
    if (!yannickBollorePersonality) {
      yannickBollorePersonality = new Personality();
      yannickBollorePersonality.name = 'Yannick Bollor√©';
      yannickBollorePersonality.description =
        'Pr√©sident du conseil de surveillance de Vivendi et PDG de Havas, fils de Vincent Bollor√©';
      yannickBollorePersonality.published = true;
      try {
        await em.persistAndFlush(yannickBollorePersonality);
        console.log('‚úÖ Created Yannick Bollor√© personality');
      } catch (error) {
        console.log(
          '   ‚ö†Ô∏è  Yannick Bollor√© personality already exists, skipping...',
        );
        yannickBollorePersonality = await em.findOne(Personality, {
          name: 'Yannick Bollor√©',
        });
      }
    }

    // Create or find Maxime Saada personality
    let maximeSaadaPersonality = await em.findOne(Personality, {
      name: 'Maxime Saada',
    });
    if (!maximeSaadaPersonality) {
      maximeSaadaPersonality = new Personality();
      maximeSaadaPersonality.name = 'Maxime Saada';
      maximeSaadaPersonality.description =
        'PDG du Groupe Canal+ et Pr√©sident de Studiocanal, figure majeure de la t√©l√©vision payante fran√ßaise';
      maximeSaadaPersonality.published = true;
      try {
        await em.persistAndFlush(maximeSaadaPersonality);
        console.log('‚úÖ Created Maxime Saada personality');
      } catch (error) {
        console.log(
          '   ‚ö†Ô∏è  Maxime Saada personality already exists, skipping...',
        );
        maximeSaadaPersonality = await em.findOne(Personality, {
          name: 'Maxime Saada',
        });
      }
    }

    // Create links between entities using EntityRelation system
    console.log('üîó Creating links between entities...');

    // Create typed relations
    try {
      // Vincent Bollor√© controls Vivendi
      await this.entityRelationService.createRelation(
        EntityType.PERSONALITY,
        vincentBollorePersonality.id,
        EntityType.FUND,
        vivendiFund.id,
        RelationType.CONTROLS,
        {
          notes: 'Vincent Bollor√© controls Vivendi through shareholding',
        },
      );
      console.log('   ‚úÖ Linked Vincent Bollor√© CONTROLS Vivendi');

      // Vincent Bollor√© controls Bollor√© Group
      await this.entityRelationService.createRelation(
        EntityType.PERSONALITY,
        vincentBollorePersonality.id,
        EntityType.FUND,
        bolloreFund.id,
        RelationType.CONTROLS,
        {
          notes: 'Vincent Bollor√© controls Bollor√© Group',
        },
      );
      console.log('   ‚úÖ Linked Vincent Bollor√© CONTROLS Bollor√© Group');

      // Vivendi operates in media sector
      await this.entityRelationService.createRelation(
        EntityType.FUND,
        vivendiFund.id,
        EntityType.SECTOR,
        mediaSector.id,
        RelationType.OPERATES_IN,
        {
          notes: 'Vivendi operates in media and communication sector',
        },
      );
      console.log('   ‚úÖ Linked Vivendi OPERATES_IN media sector');

      // Bollor√© Group operates in holding sector
      await this.entityRelationService.createRelation(
        EntityType.FUND,
        bolloreFund.id,
        EntityType.SECTOR,
        holdingSector.id,
        RelationType.OPERATES_IN,
        {
          notes: 'Bollor√© Group operates as a holding company',
        },
      );
      console.log('   ‚úÖ Linked Bollor√© Group OPERATES_IN holding sector');
    } catch (error) {
      console.log('   ‚ö†Ô∏è  Some relations already exist, continuing...');
    }

    // Create Vivendi SE company
    let vivendiCompany = await em.findOne(Company, { name: 'Vivendi SE' });
    if (!vivendiCompany) {
      vivendiCompany = new Company();
      vivendiCompany.name = 'Vivendi SE';
      vivendiCompany.description =
        'Conglom√©rat fran√ßais de m√©dias et de communication, contr√¥l√© par le groupe Bollor√©. Propri√©taire de Canal+, Havas, et autres actifs m√©diatiques majeurs.';
      vivendiCompany.source = 'https://www.vivendi.com';
      vivendiCompany.published = true;
      await em.persistAndFlush(vivendiCompany);
      console.log('‚úÖ Created Vivendi SE company');
    }

    // Create Vivendi SE company relations using EntityRelation system
    try {
      // Bollor√© Group owns Vivendi SE
      await this.entityRelationService.createRelation(
        EntityType.FUND,
        bolloreFund.id,
        EntityType.COMPANY,
        vivendiCompany.id,
        RelationType.OWNS,
        {
          notes: 'Bollor√© Group owns Vivendi SE',
        },
      );
      console.log('   ‚úÖ Linked Bollor√© Group OWNS Vivendi SE');

      // Vincent Bollor√© controls Vivendi SE
      await this.entityRelationService.createRelation(
        EntityType.PERSONALITY,
        vincentBollorePersonality.id,
        EntityType.COMPANY,
        vivendiCompany.id,
        RelationType.CONTROLS,
        {
          notes: 'Vincent Bollor√© controls Vivendi SE through Bollor√© Group',
        },
      );
      console.log('   ‚úÖ Linked Vincent Bollor√© CONTROLS Vivendi SE');

      // Vivendi SE operates in media sector
      await this.entityRelationService.createRelation(
        EntityType.COMPANY,
        vivendiCompany.id,
        EntityType.SECTOR,
        mediaSector.id,
        RelationType.OPERATES_IN,
        {
          notes: 'Vivendi SE operates in media and communication sector',
        },
      );
      console.log('   ‚úÖ Linked Vivendi SE OPERATES_IN media sector');
    } catch (error) {
      console.log(
        '   ‚ö†Ô∏è  Some Vivendi SE relations already exist, continuing...',
      );
    }

    // Create additional sectors
    console.log('üè≠ Creating additional sectors...');
    const televisionSector = await this.createOrFindSector(
      em,
      'T√©l√©vision & Audiovisuel',
      'Secteur de la t√©l√©vision, cha√Ænes et production audiovisuelle',
    );
    const radioSector = await this.createOrFindSector(
      em,
      'Radio & Audio',
      'Secteur de la radio et contenus audio',
    );
    const advertisingSector = await this.createOrFindSector(
      em,
      'Publicit√© & Marketing',
      'Secteur de la publicit√©, marketing et communication',
    );
    const cinemaSector = await this.createOrFindSector(
      em,
      'Cin√©ma & Production',
      'Secteur du cin√©ma et de la production audiovisuelle',
    );
    const publishingSector = await this.createOrFindSector(
      em,
      'Presse & Edition',
      'Secteur de la presse, √©dition et m√©dias √©crits',
    );
    const gamingSector = await this.createOrFindSector(
      em,
      'Jeux Vid√©o & Gaming',
      'Secteur des jeux vid√©o et du gaming',
    );
    const streamingSector = await this.createOrFindSector(
      em,
      'Streaming & Digital',
      'Secteur du streaming et plateformes digitales',
    );

    // Create companies
    console.log('üè¢ Creating companies...');
    const companies = [
      // T√©l√©vision & Audiovisuel
      {
        name: 'Canal+ Group',
        description:
          "Groupe de t√©l√©vision √† p√©age fran√ßais, diffuseur premium et producteur de contenus, fleuron de l'empire m√©diatique de Vivendi",
        source: 'https://www.canalplusgroup.com',
        sector: televisionSector,
        personality: maximeSaadaPersonality,
      },
      {
        name: 'CNews',
        description:
          "Cha√Æne de t√©l√©vision fran√ßaise d'information en continu, appartenant au Groupe Canal+",
        source: 'https://www.cnews.fr',
        sector: televisionSector,
        personality: vincentBollorePersonality,
      },
      {
        name: 'C8',
        description:
          'Cha√Æne de t√©l√©vision g√©n√©raliste fran√ßaise, appartenant au Groupe Canal+',
        source: 'https://www.c8.fr',
        sector: televisionSector,
        personality: vincentBollorePersonality,
      },

      // Radio & Audio
      {
        name: 'Europe 1',
        description:
          'Station de radio g√©n√©raliste fran√ßaise, appartenant √† Lagard√®re (participation Vivendi)',
        source: 'https://www.europe1.fr',
        sector: radioSector,
        personality: vincentBollorePersonality,
      },

      // Publicit√© & Marketing
      {
        name: 'Havas',
        description:
          'Groupe fran√ßais de communication et publicit√©, sixi√®me groupe mondial, propri√©t√© de Vivendi',
        source: 'https://www.havas.com',
        sector: advertisingSector,
        personality: yannickBollorePersonality,
      },

      // Cin√©ma & Production
      {
        name: 'Studiocanal',
        description:
          'Soci√©t√© fran√ßaise de production et distribution cin√©matographique, filiale du Groupe Canal+',
        source: 'https://www.studiocanal.com',
        sector: cinemaSector,
        personality: maximeSaadaPersonality,
      },

      // Presse & Edition
      {
        name: 'Prisma Media',
        description:
          "Groupe fran√ßais d'√©dition de magazines, propri√©t√© de Vivendi",
        source: 'https://www.prismamedia.com',
        sector: publishingSector,
        personality: vincentBollorePersonality,
      },
      {
        name: 'Le Journal du Dimanche',
        description:
          "Hebdomadaire fran√ßais d'information, appartenant au groupe Lagard√®re (participation Vivendi)",
        source: 'https://www.lejdd.fr',
        sector: publishingSector,
        personality: vincentBollorePersonality,
      },

      // Jeux Vid√©o & Gaming
      {
        name: 'Gameloft',
        description:
          '√âditeur et d√©veloppeur fran√ßais de jeux vid√©o mobile, filiale de Vivendi',
        source: 'https://www.gameloft.com',
        sector: gamingSector,
        personality: vincentBollorePersonality,
      },

      // Streaming & Digital
      {
        name: 'Dailymotion',
        description:
          "Plateforme fran√ßaise d'h√©bergement et de partage de vid√©os, propri√©t√© de Vivendi",
        source: 'https://www.dailymotion.com',
        sector: streamingSector,
        personality: maximeSaadaPersonality,
      },

      // Holdings & Investissement
      {
        name: 'Bollor√© SE',
        description:
          "Soci√©t√© d'investissement et holding industriel fran√ßais contr√¥l√© par Vincent Bollor√©",
        source: 'https://www.bollore.com',
        sector: holdingSector,
        personality: vincentBollorePersonality,
      },
    ];

    for (const companyData of companies) {
      const company = await this.createOrFindCompany(
        em,
        companyData.name,
        companyData.description,
        companyData.source,
      );

      // Create relations using EntityRelation system
      try {
        // Vivendi owns the company
        await this.entityRelationService.createRelation(
          EntityType.FUND,
          vivendiFund.id,
          EntityType.COMPANY,
          company.id,
          RelationType.OWNS,
          {
            notes: `Vivendi owns ${company.name}`,
          },
        );

        // Vincent Bollor√© manages the company through Vivendi
        await this.entityRelationService.createRelation(
          EntityType.PERSONALITY,
          companyData.personality.id,
          EntityType.COMPANY,
          company.id,
          RelationType.MANAGES,
          {
            notes: `${companyData.personality.name} manages ${company.name} through Vivendi`,
          },
        );

        // Company operates in its sector
        await this.entityRelationService.createRelation(
          EntityType.COMPANY,
          company.id,
          EntityType.SECTOR,
          companyData.sector.id,
          RelationType.OPERATES_IN,
          {
            notes: `${company.name} operates in ${companyData.sector.name} sector`,
          },
        );
      } catch (error) {
        console.log(
          `   ‚ö†Ô∏è  Some relations for ${company.name} already exist, continuing...`,
        );
      }
    }

    // Create personality relations
    console.log('üîó Creating personality relations...');

    // Vincent Bollor√© is family of Yannick Bollor√© (father-son)
    const vincentYannickRelation = new PersonalityRelation();
    vincentYannickRelation.sourcePersonality = vincentBollorePersonality;
    vincentYannickRelation.targetPersonality = yannickBollorePersonality;
    vincentYannickRelation.relationType = PersonalityRelationType.IS_FAMILY_OF;
    vincentYannickRelation.notes =
      'Vincent Bollor√© est le p√®re de Yannick Bollor√©';

    const yannickVincentRelation = new PersonalityRelation();
    yannickVincentRelation.sourcePersonality = yannickBollorePersonality;
    yannickVincentRelation.targetPersonality = vincentBollorePersonality;
    yannickVincentRelation.relationType = PersonalityRelationType.IS_FAMILY_OF;
    yannickVincentRelation.notes =
      'Yannick Bollor√© est le fils de Vincent Bollor√©';

    // Vincent Bollor√© is colleague of Maxime Saada (boss-employee)
    const vincentMaximeRelation = new PersonalityRelation();
    vincentMaximeRelation.sourcePersonality = vincentBollorePersonality;
    vincentMaximeRelation.targetPersonality = maximeSaadaPersonality;
    vincentMaximeRelation.relationType =
      PersonalityRelationType.IS_COLLEAGUE_OF;
    vincentMaximeRelation.notes =
      'Vincent Bollor√© est le patron de Maxime Saada';

    const maximeVincentRelation = new PersonalityRelation();
    maximeVincentRelation.sourcePersonality = maximeSaadaPersonality;
    maximeVincentRelation.targetPersonality = vincentBollorePersonality;
    maximeVincentRelation.relationType =
      PersonalityRelationType.IS_COLLEAGUE_OF;
    maximeVincentRelation.notes =
      "Maxime Saada est l'employ√© de Vincent Bollor√©";

    // Yannick Bollor√© is colleague of Maxime Saada (colleagues at Vivendi)
    const yannickMaximeRelation = new PersonalityRelation();
    yannickMaximeRelation.sourcePersonality = yannickBollorePersonality;
    yannickMaximeRelation.targetPersonality = maximeSaadaPersonality;
    yannickMaximeRelation.relationType =
      PersonalityRelationType.IS_COLLEAGUE_OF;
    yannickMaximeRelation.notes =
      'Yannick Bollor√© et Maxime Saada sont coll√®gues chez Vivendi';

    const maximeYannickRelation = new PersonalityRelation();
    maximeYannickRelation.sourcePersonality = maximeSaadaPersonality;
    maximeYannickRelation.targetPersonality = yannickBollorePersonality;
    maximeYannickRelation.relationType =
      PersonalityRelationType.IS_COLLEAGUE_OF;
    maximeYannickRelation.notes =
      'Maxime Saada et Yannick Bollor√© sont coll√®gues chez Vivendi';

    console.log('‚úÖ Personality relations created!');

    // Persist all changes
    await em.persistAndFlush([
      vivendiFund,
      bolloreFund,
      vincentBollorePersonality,
      yannickBollorePersonality,
      maximeSaadaPersonality,
      mediaSector,
      holdingSector,
      televisionSector,
      radioSector,
      advertisingSector,
      cinemaSector,
      publishingSector,
      gamingSector,
      streamingSector,
      // Personality relations
      vincentYannickRelation,
      yannickVincentRelation,
      vincentMaximeRelation,
      maximeVincentRelation,
      yannickMaximeRelation,
      maximeYannickRelation,
    ]);

    console.log('‚úÖ Bollor√© seeding completed with all links!');
  }
}
